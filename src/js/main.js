// Generated by CoffeeScript 1.3.3
(function() {
  var testSelect, viewTest;

  $(window).load(function() {
    return viewTest("bounce_then_line");
  });

  $.each(tests.names, function(i, testName) {
    return $.each(["actual", "predicted"], function(i, name) {
      var script;
      script = document.createElement("script");
      script.type = "text/javascript";
      script.src = "tests/data/json/" + testName + "/" + name + ".js";
      return document.body.appendChild(script);
    });
  });

  testSelect = $("#test_select");

  testSelect.append(Mustache.to_html($("#test_select_template").html(), tests));

  testSelect.change(function() {
    return viewTest(testSelect.val());
  });

  testSelect = $("#test_select");

  testSelect.append(Mustache.to_html($("#layer_template").html(), tests));

  window.viewtest = viewTest = function(name) {
    var NUM_FRAMES, PIXEL_SIDE_LENGTH, SIDE_LENGTH, UNIT_SIZE, actual, actualCanvas, clearCanvas, draw, drawBigPixel, frameNum, getCanvas, getNextFrameIndex, predicted, predictedCanvas, timer;
    timer = null;
    draw = function(args) {
      var callback, frame, index, row, x, xx, y, yy;
      index = getNextFrameIndex(args);
      $.map([actualCanvas, predictedCanvas], clearCanvas);
      frame = actual[index];
      y = 0;
      yy = frame.length;
      while (y < yy) {
        row = frame[y];
        x = 0;
        xx = row.length;
        while (x < xx) {
          if (actual[index][y][x] > 0) {
            drawBigPixel(actualCanvas, x, y);
          }
          if (predicted[index][y][x] > 0) {
            drawBigPixel(predictedCanvas, x, y);
          }
          frameNum.html(index);
          x++;
        }
        y++;
      }
      if (args.play && index + 1 < actual.length) {
        callback = function() {
          return draw(args);
        };
        timer = setTimeout(callback, 100);
      } else {
        clearTimeout(timer);
      }
      return true;
    };
    drawBigPixel = function(canvas, x, y) {
      return canvas.fillRect(x * UNIT_SIZE, y * UNIT_SIZE, UNIT_SIZE, UNIT_SIZE);
    };
    clearCanvas = function(canvas) {
      return canvas.clearRect(0, 0, PIXEL_SIDE_LENGTH, PIXEL_SIDE_LENGTH);
    };
    getCanvas = function(id) {
      var canvas, context;
      canvas = document.getElementById(id);
      canvas.width = PIXEL_SIDE_LENGTH;
      canvas.height = PIXEL_SIDE_LENGTH;
      context = canvas.getContext("2d");
      context.fillStyle = "#000";
      return context;
    };
    actual = window[name + "_actual"];
    predicted = window[name + "_predicted"];
    UNIT_SIZE = 16;
    SIDE_LENGTH = 16;
    PIXEL_SIDE_LENGTH = UNIT_SIZE * SIDE_LENGTH;
    NUM_FRAMES = Math.min(actual.length, predicted.length);
    actualCanvas = getCanvas("actual");
    predictedCanvas = getCanvas("predicted");
    frameNum = $("#frame_num");
    $(".controls button").unbind("click");
    getNextFrameIndex = (function() {
      var stepIndex;
      stepIndex = 0;
      return function(args) {
        if (!args.back) {
          stepIndex++;
          if (stepIndex === NUM_FRAMES) {
            stepIndex = 0;
          }
        } else {
          if (stepIndex === 0) {
            stepIndex = NUM_FRAMES;
          }
          stepIndex--;
        }
        return stepIndex;
      };
    })();
    $("#play").click(function() {
      return draw({
        play: true
      });
    });
    $('#stop').click(function() {
      return draw({
        play: false
      });
    });
    $("#step").click(function() {
      return draw({
        play: false
      });
    });
    $("#back").click(function() {
      return draw({
        play: false,
        back: true
      });
    });
    return true;
  };

}).call(this);
